@startuml SDD Class Diagram

skinparam class {
  BackgroundColor white
  ArrowColor black
  BorderColor black
}

package "ServiceLib" {
  package "ValueObjects" {
    class "identification.ID" as ID {
      -value: string
      +NewID(id: string): (ID, error)
      +GenerateID(): ID
      +String(): string
      +Equals(other: ID): bool
      +IsEmpty(): bool
    }

    class "identification.Name" as Name {
      -value: string
      +NewName(name: string): (Name, error)
      +String(): string
      +Equals(other: Name): bool
      +IsEmpty(): bool
    }

    class "identification.DateOfBirth" as DateOfBirth {
      -date: time.Time
      +NewDateOfBirth(year, month, day: int): (DateOfBirth, error)
      +String(): string
      +Equals(other: DateOfBirth): bool
      +IsEmpty(): bool
      +Date(): time.Time
    }

    class "identification.DateOfDeath" as DateOfDeath {
      -date: time.Time
      +NewDateOfDeath(year, month, day: int): (DateOfDeath, error)
      +String(): string
      +Equals(other: DateOfDeath): bool
      +IsEmpty(): bool
      +Date(): time.Time
    }
  }

  package "Retry" {
    class "retry.Config" as RetryConfig {
      -maxRetries: int
      -initialBackoff: time.Duration
      -maxBackoff: time.Duration
      +DefaultConfig(): Config
      +WithMaxRetries(maxRetries: int): Config
      +WithInitialBackoff(initialBackoff: time.Duration): Config
      +WithMaxBackoff(maxBackoff: time.Duration): Config
      +MaxRetries(): int
      +InitialBackoff(): time.Duration
      +MaxBackoff(): time.Duration
    }

    class "retry.Do" as RetryDo {
      +Do(ctx: context.Context, operation: Operation, config: Config, isRetryable: IsRetryableFunc): error
    }
  }

  package "Repository" {
    interface "repository.Repository<T>" as ServiceLibRepository {
      +GetByID(ctx: context.Context, id: string): (T, error)
      +GetAll(ctx: context.Context): ([]T, error)
      +Save(ctx: context.Context, entity: T): error
    }
  }

  package "RepositoryWrapper" {
    interface "repositorywrapper.Repository<T>" as RepositoryWrapper {
      +GetByID(ctx: context.Context, id: string): (T, error)
      +GetAll(ctx: context.Context): ([]T, error)
      +Save(ctx: context.Context, entity: T): error
    }
  }

  package "DI" {
    interface "di.ApplicationService" as ServiceLibApplicationService {
      +GetID(): string
    }
  }

  package "Validation" {
    class "validation.ValidationResult" as ValidationResult {
      -errors: *errors.ValidationErrors
      +NewValidationResult(): *ValidationResult
      +AddError(msg, field: string)
      +IsValid(): bool
      +Error(): error
    }
  }

  package "Errors" {
    class "errors.ValidationError" as ValidationError {
      -message: string
      -field: string
      -cause: error
      +NewValidationError(message, field: string, cause: error): *ValidationError
    }

    class "errors.DomainError" as DomainError {
      -code: ErrorCode
      -message: string
      -cause: error
      +NewDomainError(code: ErrorCode, message: string, cause: error): *DomainError
    }
  }

  package "Logging" {
    class "logging.ContextLogger" as ContextLogger {
      -base: *zap.Logger
      +NewContextLogger(base: *zap.Logger): *ContextLogger
      +With(ctx: context.Context): *zap.Logger
      +Debug(ctx: context.Context, msg: string, fields: ...zap.Field)
      +Info(ctx: context.Context, msg: string, fields: ...zap.Field)
      +Warn(ctx: context.Context, msg: string, fields: ...zap.Field)
      +Error(ctx: context.Context, msg: string, fields: ...zap.Field)
    }
  }
}

package "Domain Layer" {
  package "Family Aggregate" {
    class Family {
      -id: string
      -status: Status
      -parents: []*Parent
      -children: []*Child
      +NewFamily(id: string, status: Status, parents: []*Parent, children: []*Child): (*Family, error)
      +Validate(): error
      +ID(): string
      +Status(): Status
      +Parents(): []*Parent
      +Children(): []*Child
      +AddParent(parent: *Parent): error
      +AddChild(child: *Child): error
      +RemoveChild(childID: string): error
      +MarkParentDeceased(parentID: string, deathDate: time.Time): error
      +Divorce(custodialParentID: string): (*Family, error)
      +ToDTO(): FamilyDTO
    }

    class Parent {
      -id: identification.ID
      -firstName: identification.Name
      -lastName: identification.Name
      -birthDate: identification.DateOfBirth
      -deathDate: *identification.DateOfDeath
      +NewParent(id, firstName, lastName: string, birthDate: time.Time, deathDate: *time.Time): (*Parent, error)
      +Validate(): error
      +ID(): string
      +FirstName(): string
      +LastName(): string
      +BirthDate(): time.Time
      +DeathDate(): *time.Time
      +MarkDeceased(deathDate: time.Time): error
      +Equals(other: *Parent): bool
      +ToDTO(): ParentDTO
    }

    class Child {
      -id: identification.ID
      -firstName: identification.Name
      -lastName: identification.Name
      -birthDate: identification.DateOfBirth
      -deathDate: *identification.DateOfDeath
      +NewChild(id, firstName, lastName: string, birthDate: time.Time, deathDate: *time.Time): (*Child, error)
      +Validate(): error
      +ID(): string
      +FirstName(): string
      +LastName(): string
      +BirthDate(): time.Time
      +DeathDate(): *time.Time
      +MarkDeceased(deathDate: time.Time): error
      +Equals(other: *Child): bool
      +ToDTO(): ChildDTO
    }

    enum Status {
      SINGLE
      MARRIED
      DIVORCED
      WIDOWED
      ABANDONED
    }
  }

  package "Domain Services" {
    class FamilyDomainService {
      -repo: FamilyRepository
      -logger: *logging.ContextLogger
      +NewFamilyDomainService(repo: FamilyRepository, logger: *logging.ContextLogger): *FamilyDomainService
      +CreateFamily(ctx: context.Context, dto: entity.FamilyDTO): (*entity.FamilyDTO, error)
      +GetFamily(ctx: context.Context, id: string): (*entity.FamilyDTO, error)
      +AddParent(ctx: context.Context, familyID: string, parentDTO: entity.ParentDTO): (*entity.FamilyDTO, error)
      +AddChild(ctx: context.Context, familyID: string, childDTO: entity.ChildDTO): (*entity.FamilyDTO, error)
      +RemoveChild(ctx: context.Context, familyID: string, childID: string): (*entity.FamilyDTO, error)
      +MarkParentDeceased(ctx: context.Context, familyID: string, parentID: string, deathDate: time.Time): (*entity.FamilyDTO, error)
      +Divorce(ctx: context.Context, familyID: string, custodialParentID: string): (*entity.FamilyDTO, error)
    }
  }
}

package "Application Layer" {
  class FamilyApplicationService {
    -familyService: *domainservices.FamilyDomainService
    -familyRepo: domainports.FamilyRepository
    -logger: *logging.ContextLogger
    +NewFamilyApplicationService(familyService: *domainservices.FamilyDomainService, familyRepo: domainports.FamilyRepository, logger: *logging.ContextLogger): *FamilyApplicationService
    +Create(ctx: context.Context, dto: *entity.FamilyDTO): (*entity.FamilyDTO, error)
    +GetByID(ctx: context.Context, id: string): (*entity.FamilyDTO, error)
    +GetAll(ctx: context.Context): ([]*entity.FamilyDTO, error)
    +AddParent(ctx: context.Context, familyID: string, parentDTO: entity.ParentDTO): (*entity.FamilyDTO, error)
    +AddChild(ctx: context.Context, familyID: string, childDTO: entity.ChildDTO): (*entity.FamilyDTO, error)
    +RemoveChild(ctx: context.Context, familyID: string, childID: string): (*entity.FamilyDTO, error)
    +MarkParentDeceased(ctx: context.Context, familyID: string, parentID: string, deathDate: time.Time): (*entity.FamilyDTO, error)
    +Divorce(ctx: context.Context, familyID: string, custodialParentID: string): (*entity.FamilyDTO, error)
    +FindFamiliesByParent(ctx: context.Context, parentID: string): ([]*entity.FamilyDTO, error)
    +FindFamilyByChild(ctx: context.Context, childID: string): (*entity.FamilyDTO, error)
    +GetID(): string
  }

  class FamilyDTO {
    +ID: string
    +Status: string
    +Parents: []ParentDTO
    +Children: []ChildDTO
    +ParentCount: int
    +ChildrenCount: int
  }

  class ParentDTO {
    +ID: string
    +FirstName: string
    +LastName: string
    +BirthDate: time.Time
    +DeathDate: *time.Time
  }

  class ChildDTO {
    +ID: string
    +FirstName: string
    +LastName: string
    +BirthDate: time.Time
    +DeathDate: *time.Time
  }
}

package "Ports Layer" {
  interface FamilyRepository {
    +repositorywrapper.Repository<*entity.Family>
    +FindByParentID(ctx: context.Context, parentID: string): ([]*entity.Family, error)
    +FindByChildID(ctx: context.Context, childID: string): (*entity.Family, error)
  }

  interface FamilyApplicationServicePort {
    +di.ApplicationService
    +Create(ctx: context.Context, dto: *entity.FamilyDTO): (*entity.FamilyDTO, error)
    +GetByID(ctx: context.Context, id: string): (*entity.FamilyDTO, error)
    +GetAll(ctx: context.Context): ([]*entity.FamilyDTO, error)
    +AddParent(ctx: context.Context, familyID: string, parentDTO: entity.ParentDTO): (*entity.FamilyDTO, error)
    +AddChild(ctx: context.Context, familyID: string, childDTO: entity.ChildDTO): (*entity.FamilyDTO, error)
    +RemoveChild(ctx: context.Context, familyID: string, childID: string): (*entity.FamilyDTO, error)
    +MarkParentDeceased(ctx: context.Context, familyID: string, parentID: string, deathDate: time.Time): (*entity.FamilyDTO, error)
    +Divorce(ctx: context.Context, familyID: string, custodialParentID: string): (*entity.FamilyDTO, error)
    +FindFamiliesByParent(ctx: context.Context, parentID: string): ([]*entity.FamilyDTO, error)
    +FindFamilyByChild(ctx: context.Context, childID: string): (*entity.FamilyDTO, error)
  }
}

package "Adapters Layer" {
  package "Config Adapter" {
    class Config {
      +App: AppConfig
      +Auth: AuthConfig
      +Database: DatabaseConfig
      +Features: FeaturesConfig
      +Log: LogConfig
      +Retry: RetryConfig
      +Server: ServerConfig
      +Telemetry: TelemetryConfig
    }

    class RetryConfig {
      +MaxRetries: int
      +InitialBackoff: time.Duration
      +MaxBackoff: time.Duration
    }

    interface RetryConfigAdapter {
      +GetMaxRetries(): int
      +GetInitialBackoff(): time.Duration
      +GetMaxBackoff(): time.Duration
    }
  }

  package "GraphQL Adapter" {
    class Resolver {
      -familySvc: FamilyApplicationServicePort
      -logger: *logging.ContextLogger
      +NewResolver(familySvc: FamilyApplicationServicePort, logger: *logging.ContextLogger): *Resolver
      +CreateFamily(ctx: context.Context, input: FamilyInput): (*Family, error)
      +GetFamily(ctx: context.Context, id: string): (*Family, error)
      +AddParent(ctx: context.Context, familyID: string, input: ParentInput): (*Family, error)
      +AddChild(ctx: context.Context, familyID: string, input: ChildInput): (*Family, error)
      +RemoveChild(ctx: context.Context, familyID: string, childID: string): (*Family, error)
      +MarkParentDeceased(ctx: context.Context, familyID: string, parentID: string, deathDate: string): (*Family, error)
      +Divorce(ctx: context.Context, familyID: string, custodialParentID: string): (*Family, error)
      +FindFamiliesByParent(ctx: context.Context, parentID: string): ([]*Family, error)
      +FindFamilyByChild(ctx: context.Context, childID: string): (*Family, error)
    }
  }

  package "MongoDB Adapter" {
    class MongoFamilyRepository {
      -collection: *mongo.Collection
      +NewMongoFamilyRepository(collection: *mongo.Collection): *MongoFamilyRepository
      +GetByID(ctx: context.Context, id: string): (*entity.Family, error)
      +GetAll(ctx: context.Context): ([]*entity.Family, error)
      +Save(ctx: context.Context, family: *entity.Family): error
      +FindByParentID(ctx: context.Context, parentID: string): ([]*entity.Family, error)
      +FindByChildID(ctx: context.Context, childID: string): (*entity.Family, error)
    }
  }

  package "PostgreSQL Adapter" {
    class PostgresFamilyRepository {
      -DB: *pgxpool.Pool
      -logger: *logging.ContextLogger
      +NewPostgresFamilyRepository(db: *pgxpool.Pool, logger: *logging.ContextLogger): *PostgresFamilyRepository
      +GetByID(ctx: context.Context, id: string): (*entity.Family, error)
      +GetAll(ctx: context.Context): ([]*entity.Family, error)
      +Save(ctx: context.Context, family: *entity.Family): error
      +FindByParentID(ctx: context.Context, parentID: string): ([]*entity.Family, error)
      +FindByChildID(ctx: context.Context, childID: string): (*entity.Family, error)
    }
  }

  package "SQLite Adapter" {
    class SQLiteFamilyRepository {
      -DB: *sql.DB
      -logger: *logging.ContextLogger
      +NewSQLiteFamilyRepository(db: *sql.DB, logger: *logging.ContextLogger): *SQLiteFamilyRepository
      +GetByID(ctx: context.Context, id: string): (*entity.Family, error)
      +GetAll(ctx: context.Context): ([]*entity.Family, error)
      +Save(ctx: context.Context, family: *entity.Family): error
      +FindByParentID(ctx: context.Context, parentID: string): ([]*entity.Family, error)
      +FindByChildID(ctx: context.Context, childID: string): (*entity.Family, error)
    }
  }
}

' Relationships
Family "1" *-- "1..2" Parent
Family "1" *-- "0..*" Child
Family -- Status

Parent -- ID
Parent -- Name
Parent -- DateOfBirth
Parent -- DateOfDeath

Child -- ID
Child -- Name
Child -- DateOfBirth
Child -- DateOfDeath

FamilyDomainService --> FamilyRepository : uses
FamilyDomainService --> ContextLogger : uses

FamilyApplicationService --> FamilyDomainService : uses
FamilyApplicationService --> FamilyRepository : uses
FamilyApplicationService --> ContextLogger : uses
FamilyApplicationService ..|> FamilyApplicationServicePort : implements
FamilyApplicationService ..|> ServiceLibApplicationService : implements

Resolver --> FamilyApplicationServicePort : uses
Resolver --> ContextLogger : uses

MongoFamilyRepository ..|> FamilyRepository : implements
PostgresFamilyRepository ..|> FamilyRepository : implements
SQLiteFamilyRepository ..|> FamilyRepository : implements

MongoFamilyRepository --> RetryConfig : uses
PostgresFamilyRepository --> RetryConfig : uses
SQLiteFamilyRepository --> RetryConfig : uses

Config ..|> RetryConfigAdapter : implements
Config *-- RetryConfig : contains

FamilyRepository --|> RepositoryWrapper : extends
RepositoryWrapper ..> ServiceLibRepository : wraps

FamilyDomainService ..> Family : creates/manipulates
FamilyDomainService ..> FamilyDTO : converts
FamilyDomainService ..> ParentDTO : converts
FamilyDomainService ..> ChildDTO : converts
@enduml
