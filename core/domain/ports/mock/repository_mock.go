// Copyright (c) 2025 A Bit of Help, Inc.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abitofhelp/family-service/core/domain/ports (interfaces: FamilyRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/abitofhelp/family-service/core/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockFamilyRepository is a mock of FamilyRepository interface.
type MockFamilyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyRepositoryMockRecorder
}

// MockFamilyRepositoryMockRecorder is the mock recorder for MockFamilyRepository.
type MockFamilyRepositoryMockRecorder struct {
	mock *MockFamilyRepository
}

// NewMockFamilyRepository creates a new mock instance.
func NewMockFamilyRepository(ctrl *gomock.Controller) *MockFamilyRepository {
	mock := &MockFamilyRepository{ctrl: ctrl}
	mock.recorder = &MockFamilyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFamilyRepository) EXPECT() *MockFamilyRepositoryMockRecorder {
	return m.recorder
}

// FindByChildID mocks base method.
func (m *MockFamilyRepository) FindByChildID(ctx context.Context, childID string) (*entity.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByChildID", ctx, childID)
	ret0, _ := ret[0].(*entity.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByChildID indicates an expected call of FindByChildID.
func (mr *MockFamilyRepositoryMockRecorder) FindByChildID(ctx, childID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByChildID", reflect.TypeOf((*MockFamilyRepository)(nil).FindByChildID), ctx, childID)
}

// FindByParentID mocks base method.
func (m *MockFamilyRepository) FindByParentID(ctx context.Context, parentID string) ([]*entity.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByParentID", ctx, parentID)
	ret0, _ := ret[0].([]*entity.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByParentID indicates an expected call of FindByParentID.
func (mr *MockFamilyRepositoryMockRecorder) FindByParentID(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByParentID", reflect.TypeOf((*MockFamilyRepository)(nil).FindByParentID), ctx, parentID)
}

// GetAll mocks base method.
func (m *MockFamilyRepository) GetAll(ctx context.Context) ([]*entity.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFamilyRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFamilyRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockFamilyRepository) GetByID(ctx context.Context, id string) (*entity.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFamilyRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFamilyRepository)(nil).GetByID), ctx, id)
}

// Save mocks base method.
func (m *MockFamilyRepository) Save(ctx context.Context, family *entity.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, family)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFamilyRepositoryMockRecorder) Save(ctx, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFamilyRepository)(nil).Save), ctx, family)
}