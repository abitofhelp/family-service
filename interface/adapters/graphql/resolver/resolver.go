// Copyright (c) 2025 A Bit of Help, Inc.

// Package resolver implements GraphQL resolvers for the family service.
//
// In GraphQL, resolvers are functions that resolve (fetch or compute) the data
// for fields in a GraphQL query. This package contains the resolver implementations
// for the family service's GraphQL API.
//
// The resolvers follow a pattern where:
// 1. They receive GraphQL requests from clients
// 2. They translate these requests into calls to application services
// 3. They convert the results back into the format expected by GraphQL
//
// This approach keeps the GraphQL-specific code isolated in this package,
// allowing the application services to remain focused on business logic
// without any knowledge of GraphQL.
package resolver

import (
	"github.com/abitofhelp/family-service/core/application/ports"
	"github.com/abitofhelp/family-service/interface/adapters/graphql/dto"
	"github.com/abitofhelp/family-service/interface/adapters/graphql/generated"
)

// This file will not be regenerated automatically.
//
// It serves as dependency injection for your app, add any dependencies you require here.

// Resolver serves as a dependency injection container for GraphQL resolvers.
//
// This struct holds references to the application services and other dependencies
// needed by the resolvers. It follows the Dependency Injection pattern, where
// dependencies are provided from the outside rather than created internally.
//
// The Resolver acts as a facade between the GraphQL layer and the application layer,
// delegating client requests to the appropriate application services.
//
// This approach:
// 1. Decouples the GraphQL layer from the application layer
// 2. Makes dependencies explicit and visible
// 3. Improves testability by allowing mock implementations
// 4. Centralizes dependency management
type Resolver struct {
	familyService ports.FamilyApplicationService // Application service for family operations
	mapper       dto.FamilyMapper               // Mapper for converting between GraphQL and domain models
}

// NewResolver creates a new resolver with the given dependencies.
//
// This function creates a new Resolver instance with the provided dependencies.
// It follows the Dependency Injection pattern, requiring all dependencies
// to be provided rather than creating them internally.
//
// Parameters:
//   - familyService: Application service for family operations
//   - mapper: Mapper for converting between GraphQL and domain models
//
// Returns:
//   - A new Resolver instance with the provided dependencies
func NewResolver(familyService ports.FamilyApplicationService, mapper dto.FamilyMapper) *Resolver {
	return &Resolver{
		familyService: familyService,
		mapper:       mapper,
	}
}

// Query returns the query resolver implementation.
//
// This method returns a resolver for GraphQL query operations.
// In GraphQL, queries are used to retrieve data (similar to GET in REST).
//
// The returned queryResolver embeds the main Resolver, giving it
// access to all the dependencies needed to resolve queries.
//
// Returns:
//   - A QueryResolver implementation that can handle GraphQL queries
func (r *Resolver) Query() generated.QueryResolver {
	return &queryResolver{r}
}

// Mutation returns the mutation resolver implementation.
//
// This method returns a resolver for GraphQL mutation operations.
// In GraphQL, mutations are used to modify data (similar to POST, PUT, DELETE in REST).
//
// The returned mutationResolver embeds the main Resolver, giving it
// access to all the dependencies needed to resolve mutations.
//
// Returns:
//   - A MutationResolver implementation that can handle GraphQL mutations
func (r *Resolver) Mutation() generated.MutationResolver {
	return &mutationResolver{r}
}

// Family returns the family resolver implementation.
//
// This method returns a resolver for the Family type in GraphQL.
// Type resolvers are used to resolve fields on specific GraphQL types.
//
// The returned familyResolver embeds the main Resolver, giving it
// access to all the dependencies needed to resolve Family fields.
//
// Returns:
//   - A FamilyResolver implementation that can resolve fields on Family objects
func (r *Resolver) Family() generated.FamilyResolver {
	return &familyResolver{r}
}

// These types implement the specific resolver interfaces generated by gqlgen.
// Each embeds the main Resolver to access its dependencies.
type (
	// queryResolver implements the QueryResolver interface for handling GraphQL queries.
	queryResolver struct {
		*Resolver // Embeds the main Resolver for access to dependencies
	}

	// mutationResolver implements the MutationResolver interface for handling GraphQL mutations.
	mutationResolver struct {
		*Resolver // Embeds the main Resolver for access to dependencies
	}

	// familyResolver implements the FamilyResolver interface for resolving fields on Family objects.
	familyResolver struct {
		*Resolver // Embeds the main Resolver for access to dependencies
	}
)
