# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - interface/adapters/graphql/schema.graphql

# Where should the generated server code go?
exec:
  filename: interface/adapters/graphql/generated/generated.go
  package: generated

# Where should any generated models go?
model:
  filename: interface/adapters/graphql/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: interface/adapters/graphql/resolver
  package: resolver

  filename_template: "{name}_resolvers.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/abitofhelp/family-service/interface/adapters/graphql/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/abitofhelp/servicelib/valueobject/identification.ID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  ParentID:
    model:
      - github.com/abitofhelp/servicelib/valueobject/identification.ID
  ChildID:
    model:
      - github.com/abitofhelp/servicelib/valueobject/identification.ID
  Parent:
    model:
      - github.com/abitofhelp/family-service/interface/adapters/graphql/model.Parent
  Child:
    model:
      - github.com/abitofhelp/family-service/interface/adapters/graphql/model.Child
  Family:
    fields:
      parentCount:
        resolver: true
      childrenCount:
        resolver: true
