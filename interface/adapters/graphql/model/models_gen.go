// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/abitofhelp/servicelib/valueobject"
)

// Input for creating a child
type ChildInput struct {
	ID        valueobject.ID `json:"id"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	BirthDate string         `json:"birthDate"`
	DeathDate *string        `json:"deathDate,omitempty"`
}

// Error represents an error that occurred during a GraphQL operation
type Error struct {
	Message string   `json:"message"`
	Code    *string  `json:"code,omitempty"`
	Path    []string `json:"path,omitempty"`
}

// Family represents a family unit with parents and children
type Family struct {
	ID            valueobject.ID `json:"id"`
	Status        FamilyStatus   `json:"status"`
	Parents       []*Parent      `json:"parents"`
	Children      []*Child       `json:"children"`
	ParentCount   int            `json:"parentCount"`
	ChildrenCount int            `json:"childrenCount"`
}

// Input for creating a family
type FamilyInput struct {
	ID       valueobject.ID `json:"id"`
	Status   FamilyStatus   `json:"status"`
	Parents  []*ParentInput `json:"parents"`
	Children []*ChildInput  `json:"children"`
}

// Mutations for modifying family data
type Mutation struct {
}

// Input for creating a parent
type ParentInput struct {
	ID        valueobject.ID `json:"id"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	BirthDate string         `json:"birthDate"`
	DeathDate *string        `json:"deathDate,omitempty"`
}

// Queries for retrieving family data
type Query struct {
}

// FamilyStatus represents the current status of a family
type FamilyStatus string

const (
	FamilyStatusSingle    FamilyStatus = "SINGLE"
	FamilyStatusMarried   FamilyStatus = "MARRIED"
	FamilyStatusDivorced  FamilyStatus = "DIVORCED"
	FamilyStatusWidowed   FamilyStatus = "WIDOWED"
	FamilyStatusAbandoned FamilyStatus = "ABANDONED"
)

var AllFamilyStatus = []FamilyStatus{
	FamilyStatusSingle,
	FamilyStatusMarried,
	FamilyStatusDivorced,
	FamilyStatusWidowed,
	FamilyStatusAbandoned,
}

func (e FamilyStatus) IsValid() bool {
	switch e {
	case FamilyStatusSingle, FamilyStatusMarried, FamilyStatusDivorced, FamilyStatusWidowed, FamilyStatusAbandoned:
		return true
	}
	return false
}

func (e FamilyStatus) String() string {
	return string(e)
}

func (e *FamilyStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FamilyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FamilyStatus", str)
	}
	return nil
}

func (e FamilyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FamilyStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FamilyStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Resource represents the resource type being accessed
type Resource string

const (
	ResourceFamily Resource = "FAMILY"
	ResourceParent Resource = "PARENT"
	ResourceChild  Resource = "CHILD"
)

var AllResource = []Resource{
	ResourceFamily,
	ResourceParent,
	ResourceChild,
}

func (e Resource) IsValid() bool {
	switch e {
	case ResourceFamily, ResourceParent, ResourceChild:
		return true
	}
	return false
}

func (e Resource) String() string {
	return string(e)
}

func (e *Resource) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Resource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Resource", str)
	}
	return nil
}

func (e Resource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Resource) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Resource) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Role represents the authorization role of a user
type Role string

const (
	RoleAdmin  Role = "ADMIN"
	RoleEditor Role = "EDITOR"
	RoleViewer Role = "VIEWER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleEditor,
	RoleViewer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleEditor, RoleViewer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Scope represents the permission scope for a resource
type Scope string

const (
	ScopeRead   Scope = "READ"
	ScopeWrite  Scope = "WRITE"
	ScopeDelete Scope = "DELETE"
	ScopeCreate Scope = "CREATE"
)

var AllScope = []Scope{
	ScopeRead,
	ScopeWrite,
	ScopeDelete,
	ScopeCreate,
}

func (e Scope) IsValid() bool {
	switch e {
	case ScopeRead, ScopeWrite, ScopeDelete, ScopeCreate:
		return true
	}
	return false
}

func (e Scope) String() string {
	return string(e)
}

func (e *Scope) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Scope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Scope", str)
	}
	return nil
}

func (e Scope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Scope) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Scope) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
